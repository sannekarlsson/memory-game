{"version":3,"sources":["js/Card.js","js/cardElement.js","js/iconConstants.js","js/icon.js","js/main.js"],"names":["Card","element","prototype","addClass","classes","classList","add","dispatchCardEvent","removeClass","remove","cardEvent","CustomEvent","bubbles","detail","cardClass","className","index","dataset","dispatchEvent","cardElement","face","icon","card","document","createElement","cardFace","title","append","cardBack","back","innerHTML","ICONS","DICE","path","DROPLET","EARTH","HEADPHONES","LIBRARY","ROCKET","STAR","TROPHY","iconObject","map","p","join","displayTimeout","STATE","cardFlips","cardProperties","isCongratulated","matchedPairs","SELECTED","CURRENT","memoryGame","querySelector","memoryGrid","gameCompleted","result","newGameButton","currentCardSelection","getElementsByClassName","stateUpdateEvent","gameCompletedEvent","memoryCards","initializeMemoryCards","name","cardIcon","toLowerCase","push","initializeMemoryCardsFromState","toUpperCase","cardElem","addCardElementsToTheDOM","cardElements","flipCard","includes","length","matchSelectedCards","resetCards","cardCollection","slice","call","forEach","updateMatchedPairs","isMatchingPair","card1","card2","setTimeout","displayGameCompleted","style","overflow","innerText","setAttribute","hideGameCompleted","removeAttribute","displayCongrats","initializeGame","randomizeCardsAndSetMemoryField","initializeGameFromState","setMemoryField","randomizeCards","sort","a","b","Math","random","resetGame","children","newGame","clearTimeout","setCardProperties","storeState","event","target","matches","localStorage","setItem","JSON","stringify","documentElement","addEventListener","preventDefault","closest","previousCardProps","Object","assign","start","storedState","getItem","parse"],"mappings":"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","file":"main.33528174.js","sourceRoot":"..","sourcesContent":["function Card(element) {\n    this.element = element;\n}\n\nCard.prototype.addClass = function (...classes) {\n\n    this.element.classList.add(...classes);\n\n    this.dispatchCardEvent()\n}\n\nCard.prototype.removeClass = function (...classes) {\n\n    this.element.classList.remove(...classes);\n\n    this.dispatchCardEvent()\n}\n\n/**\n * Dispatch an event to indicate the card element\n * has been altered.\n */\nCard.prototype.dispatchCardEvent = function () {\n\n    const cardEvent = new CustomEvent('cardstate', {\n        bubbles: true,\n        detail: {\n            cardClass: this.element.className,\n            index: this.element.dataset.index,\n        }\n    })\n\n    this.element.dispatchEvent(cardEvent);\n}\n\nexport default Card","// Create a card element\nconst cardElement = (face, icon, classes = 'card') => {\n    const card = document.createElement('button')\n    card.className = classes\n    // For matching flipped cards\n    card.dataset.cardFace = face\n    card.title = 'memory-card'\n    card.append(cardBack(), cardFace(face, icon))\n    return card\n}\n\n// Create back side of card\nconst cardBack = () => {\n    const back = document.createElement('span')\n    back.className = 'card-back'\n    return back\n}\n\n// Create face of card\nconst cardFace = (face, icon) => {\n    const cardFace = document.createElement('span')\n    cardFace.className = `card-face ${face}`\n    cardFace.innerHTML = icon\n    return cardFace\n}\n\nexport default cardElement","// Use an svgomg to simplify the svg into path d(s)\n// https://jakearchibald.github.io/svgomg/ \n\nconst ICONS = {\n    DICE: {\n        title: \"Dice\",\n        path: [\n            \"M27 6h-16c-2.75 0-5 2.25-5 5v16c0 2.75 2.25 5 5 5h16c2.75 0 5-2.25 5-5v-16c0-2.75-2.25-5-5-5zM13 28c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3zM13 16c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3zM19 22c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3zM25 28c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3zM25 16c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3zM25.899 4c-0.467-2.275-2.491-4-4.899-4h-16c-2.75 0-5 2.25-5 5v16c0 2.408 1.725 4.432 4 4.899v-19.899c0-1.1 0.9-2 2-2h19.899z\"\n        ]\n    },\n    DROPLET: {\n        title: \"Droplet\",\n        path: [\n            \"M27.020 14.786c-2.055-5.732-6.41-10.88-11.020-14.786-4.61 3.907-8.965 9.054-11.020 14.786-1.271 3.545-1.396 7.393 0.393 10.794 2.058 3.911 6.207 6.42 10.626 6.42s8.569-2.509 10.626-6.42c1.79-3.401 1.664-7.249 0.393-10.794zM23.086 23.717c-1.369 2.602-4.15 4.283-7.086 4.283-1.723 0-3.391-0.579-4.753-1.583 0.414 0.054 0.832 0.083 1.254 0.083 3.67 0 7.146-2.1 8.856-5.351 1.402-2.665 1.281-5.433 0.746-7.636 0.455 0.88 0.841 1.756 1.151 2.623 0.706 1.971 1.251 4.886-0.168 7.581z\"\n        ]\n    },\n    EARTH: {\n        title: \"Earth\",\n        path: [\n            \"M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM16 30c-1.967 0-3.84-0.407-5.538-1.139l7.286-8.197c0.163-0.183 0.253-0.419 0.253-0.664v-3c0-0.552-0.448-1-1-1-3.531 0-7.256-3.671-7.293-3.707-0.188-0.188-0.442-0.293-0.707-0.293h-4c-0.552 0-1 0.448-1 1v6c0 0.379 0.214 0.725 0.553 0.894l3.447 1.724v5.871c-3.627-2.53-6-6.732-6-11.489 0-2.147 0.484-4.181 1.348-6h3.652c0.265 0 0.52-0.105 0.707-0.293l4-4c0.188-0.188 0.293-0.442 0.293-0.707v-2.419c1.268-0.377 2.61-0.581 4-0.581 2.2 0 4.281 0.508 6.134 1.412-0.13 0.109-0.256 0.224-0.376 0.345-1.133 1.133-1.757 2.64-1.757 4.243s0.624 3.109 1.757 4.243c1.139 1.139 2.663 1.758 4.239 1.758 0.099 0 0.198-0.002 0.297-0.007 0.432 1.619 1.211 5.833-0.263 11.635-0.014 0.055-0.022 0.109-0.026 0.163-2.541 2.596-6.084 4.208-10.004 4.208z\"\n        ]\n    },\n    HEADPHONES: {\n        title: \"Headphones\",\n        path: [\n            \"M9 18H7v14h2c.55 0 1-.45 1-1V19c0-.55-.45-1-1-1zM23 18c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h2V18h-2z\",\n            \"M32 16c0-8.837-7.163-16-16-16S0 7.163 0 16c0 1.919.338 3.759.958 5.464C.349 22.502 0 23.71 0 25c0 3.526 2.608 6.443 6 6.929V18.072a6.957 6.957 0 0 0-2.742 1.012C3.09 18.249 3 17.385 3 16.5c0-7.18 5.82-13 13-13s13 5.82 13 13c0 .885-.088 1.749-.257 2.584A6.9629 6.9629 0 0 0 26 18.071v13.858c3.392-.485 6-3.402 6-6.929 0-1.29-.349-2.498-.958-3.536.62-1.705.958-3.545.958-5.465z\"\n        ]\n    },\n    LIBRARY: {\n        title: \"Library\",\n        path: [\n            \"M32 30v-2h-2V16h2v-2h-6v2h2v12h-6V16h2v-2h-6v2h2v12h-6V16h2v-2h-6v2h2v12H6V16h2v-2H2v2h2v12H2v2H0v2h34v-2h-2zM16 0h2l16 10v2H0v-2L16 0z\"\n        ]\n    },\n    ROCKET: {\n        title: \"Rocket\",\n        path: [\n            \"M22 2l-10 10h-6l-6 8c0 0 6.357-1.77 10.065-0.94l-10.065 12.94 13.184-10.255c1.839 4.208-1.184 10.255-1.184 10.255l8-6v-6l10-10 2-10-10 2z\"\n        ]\n    },\n    STAR: {\n        title: \"Star\",\n        path: [\n            \"M32 12.408l-11.056-1.607-4.944-10.018-4.944 10.018-11.056 1.607 8 7.798-1.889 11.011 9.889-5.199 9.889 5.199-1.889-11.011 8-7.798z\"\n        ]\n    },\n    TROPHY: {\n        title: \"Trophy\",\n        path: [\n            \"M26 6v-4h-20v4h-6v4c0 3.314 2.686 6 6 6 0.627 0 1.232-0.096 1.801-0.275 1.443 2.063 3.644 3.556 6.199 4.075v6.2h-2c-2.209 0-4 1.791-4 4h16c0-2.209-1.791-4-4-4h-2v-6.2c2.555-0.519 4.756-2.012 6.199-4.075 0.568 0.179 1.173 0.275 1.801 0.275 3.314 0 6-2.686 6-6v-4h-6zM6 13.625c-1.999 0-3.625-1.626-3.625-3.625v-2h3.625v2c0 1.256 0.232 2.457 0.655 3.565-0.213 0.039-0.431 0.060-0.655 0.060zM29.625 10c0 1.999-1.626 3.625-3.625 3.625-0.224 0-0.442-0.021-0.655-0.060 0.423-1.107 0.655-2.309 0.655-3.565v-2h3.625v2z\"\n        ]\n    },\n}\n\nexport default ICONS","// Use an svgomg to simplify the svg into path d(s)\n// https://jakearchibald.github.io/svgomg/ \n\nconst icon = (iconObject) => {\n    const path = iconObject.path.map(p =>\n        `<path d=\"${p}\"></path>`\n    ).join('')\n\n    return (\n        `<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" class=\"icon\">\n        <title>${iconObject.title}</title>\n        ${path}\n    </svg>`\n    )\n}\n\nexport default icon","'use strict'\n\nimport Card from './Card'\nimport cardElement from './cardElement'\nimport ICONS from './iconConstants'\nimport icon from './icon'\n\n\nconst STATE = {\n    // Result to user\n    cardFlips: 0,\n    // Classes and card faces to generate cards from a previous session\n    cardProperties: [],\n    // Displayed congrats to user after game completion\n    isCongratulated: false,\n    // Keep count to decide when game is completed (8)\n    matchedPairs: 0,\n}\n\n\n// Class for flipping a card \nconst SELECTED = 'selected'\n// Class for currently flipped card(s)\nconst CURRENT = 'current'\n\n// Prevent display of the game completed if user clicks on the new game button\nlet displayTimeout\n\n\n/**********************************\n * DOM elements\n **********************************/\nconst memoryGame = document.querySelector('.memory-game')\nconst memoryGrid = memoryGame.querySelector('.memory-grid')\nconst gameCompleted = memoryGame.querySelector('.game-completed')\nconst result = gameCompleted.querySelector('.card-flips')\nconst newGameButton = document.querySelector('.new-game')\n// Use .getElementsByClassName since need a live collection\nconst currentCardSelection = memoryGrid.getElementsByClassName(CURRENT)\n\n\n/**********************************\n * Custom events \n **********************************/\n\n// Custom state update event to store the new state \nconst stateUpdateEvent = new CustomEvent('stateupdate', { bubbles: true })\n\n// Custom game completion event \nconst gameCompletedEvent = new CustomEvent('gamecompleted', { bubbles: true })\n\n\n/**********************************\n * Initialize memory cards \n **********************************/\nlet memoryCards = []\n\n// Initialize memoryCards array of 16 (8*2) card elements with icons\nconst initializeMemoryCards = () => {\n\n    for (let name in ICONS) {\n        const cardIcon = icon(ICONS[name])\n        const face = name.toLowerCase()\n\n        memoryCards.push(new Card(cardElement(face, cardIcon)))\n        memoryCards.push(new Card(cardElement(face, cardIcon)))\n    }\n}\n\n// Initialize memoryCards array from previous session\nconst initializeMemoryCardsFromState = () => {\n\n    memoryCards = STATE.cardProperties.map(({ cardClass, cardFace }) => {\n        const cardIcon = ICONS[cardFace.toUpperCase()]\n        const cardElem = cardElement(cardFace, icon(cardIcon), cardClass)\n        return new Card(cardElem)\n    })\n}\n\n/**********************************\n * DOM and state updates \n **********************************/\n\nconst addCardElementsToTheDOM = cardElements => {\n    // Add card elements to the DOM\n    memoryGrid.append(...cardElements)\n\n    // Updates to DOM/state\n    memoryGrid.dispatchEvent(stateUpdateEvent)\n}\n\nconst flipCard = card => {\n\n    // Card already flipped or two other cards are\n    if (card.className.includes(SELECTED) ||\n        currentCardSelection.length === 2) {\n        return;\n    }\n\n    // Add to result message\n    STATE.cardFlips++\n\n    // Add classes to flip card and perform matching\n    memoryCards[card.dataset.index].addClass(SELECTED, CURRENT)\n\n    matchSelectedCards()\n}\n\nconst resetCards = (cardCollection, ...classes) => {\n\n    [].slice.call(cardCollection).forEach(card => {\n\n        memoryCards[card.dataset.index].removeClass(...classes)\n\n    })\n}\n\n// Update matched pairs\nconst updateMatchedPairs = () => {\n\n    if (++STATE.matchedPairs === 8) {\n        // All cards flipped -- game completed\n        memoryGame.dispatchEvent(gameCompletedEvent)\n\n    } else {\n        // Reset currently selected cards\n        resetCards(currentCardSelection, CURRENT)\n    }\n}\n\n\n/**********************************\n * Card matching \n **********************************/\n\nconst isMatchingPair = () => {\n    const [card1, card2] = [].slice.call(currentCardSelection)\n    return card1.dataset.cardFace === card2.dataset.cardFace\n}\n\n// Check if the selected cards match\nconst matchSelectedCards = () => {\n\n    // Only match when there are two cards\n    if (currentCardSelection.length < 2) {\n        return\n    }\n\n    if (isMatchingPair()) {\n        updateMatchedPairs()\n    } else {\n        setTimeout(() => {\n            resetCards(currentCardSelection, SELECTED, CURRENT)\n        }, 1000)\n    }\n}\n\n\n/********************************************\n * Game completed message\n ********************************************/\nconst displayGameCompleted = () => {\n    memoryGame.style.overflow = 'hidden'\n    result.innerText = `${STATE.cardFlips} card flips`\n    memoryGrid.classList.add('blur')\n    gameCompleted.setAttribute('style', 'opacity: 1; visibility: visible')\n}\n\nconst hideGameCompleted = () => {\n    gameCompleted.removeAttribute('style')\n    memoryGrid.classList.remove('blur')\n    memoryGame.style.overflow = 'visible'\n}\n\nconst displayCongrats = () => {\n\n    // Congrats already displayed in previous session\n    if (STATE.isCongratulated) return;\n\n    displayTimeout = setTimeout(() => {\n        displayGameCompleted()\n\n        setTimeout(hideGameCompleted, 4000)\n    }, 500)\n\n}\n\n\n/********************************************\n * Game setups\n ********************************************/\n\n/**\n* Initialize game from scratch\n*/\nconst initializeGame = () => {\n\n    // Initialize array of cards\n    initializeMemoryCards()\n\n    // Randomize order of cards and initialize game field\n    randomizeCardsAndSetMemoryField()\n}\n\n/**\n * Initialize game from stored state\n */\nconst initializeGameFromState = () => {\n\n    // Initialize array of card elements from state\n    initializeMemoryCardsFromState()\n\n    // Initialize current game field\n    setMemoryField()\n\n    // Perform match check\n    matchSelectedCards()\n}\n\n\n// Randomize card order\nconst randomizeCards = () => {\n    memoryCards.sort((a, b) => 0.5 - Math.random())\n}\n\n// Set memory field\nconst setMemoryField = () => {\n\n    // The index is used for accessing the card object  \n    // in the memoryCards array.\n    const cardElements = memoryCards.map((card, index) => {\n        card.element.dataset.index = index;\n\n        return card.element;\n    })\n\n    // Add card elements to the DOM\n    addCardElementsToTheDOM(cardElements)\n}\n\nconst randomizeCardsAndSetMemoryField = () => {\n    randomizeCards()\n    setMemoryField()\n}\n\n// Reset game to start a new\nconst resetGame = () => {\n    STATE.matchedPairs = 0\n    STATE.cardFlips = 0\n    STATE.isCongratulated = false\n    resetCards(memoryGrid.children, SELECTED, CURRENT)\n    hideGameCompleted()\n}\n\n// New game\nconst newGame = () => {\n    clearTimeout(displayTimeout)\n    resetGame()\n    randomizeCardsAndSetMemoryField()\n}\n\n\n/********************************************\n * State storage handling\n ********************************************/\n\n/**\n * Store classes and card faces of the cards\n * since they determine the state of the game  \n */\nconst setCardProperties = () => {\n    // Update card properties\n    STATE.cardProperties = memoryCards.map(card => {\n        return {\n            cardClass: card.element.className,\n            cardFace: card.element.dataset.cardFace,\n        }\n    })\n}\n\n/**\n * Store the updated state, \n * so the game can be continued in new sessions\n */\nconst storeState = event => {\n\n    // Cards added to the field, update their state\n    if (event.target.matches('.memory-grid')) {\n        setCardProperties()\n    }\n\n    localStorage.setItem('state', JSON.stringify(STATE))\n}\n\n\n/********************************************\n * Event listeners\n ********************************************/\n\n/**\n * Click events\n */\ndocument.documentElement.addEventListener('click', event => {\n\n    // New game button click\n    if (event.target.matches('.new-game')) {\n        event.preventDefault()\n\n        newGame()\n    }\n\n\n    // Card click\n    if (event.target.closest('.card')) {\n        event.preventDefault()\n\n        flipCard(event.target.closest('.card'))\n    }\n})\n\n/**\n * Custom card state event\n */\ndocument.addEventListener('cardstate', event => {\n\n    const previousCardProps = STATE.cardProperties[event.detail.index]\n\n    // Update card classes \n    Object.assign(previousCardProps, { cardClass: event.detail.cardClass })\n\n    // Updates to DOM/state\n    event.target.dispatchEvent(stateUpdateEvent)\n})\n\n/**\n * Custom game completed event\n */\ndocument.addEventListener('gamecompleted', event => {\n    displayCongrats()\n    STATE.isCongratulated = true\n\n    // Updates to DOM/state\n    event.target.dispatchEvent(stateUpdateEvent)\n})\n\n/**\n * Custom state update event to store the new state\n */\ndocument.addEventListener('stateupdate', storeState)\n\n\n/**\n * Touch effect to New game button\n */\nnewGameButton.addEventListener('touchstart', () => {\n    newGameButton.classList.add('touch')\n})\n\nnewGameButton.addEventListener('touchend', () => {\n    newGameButton.classList.remove('touch')\n})\n\n\n/********************************************\n * Start game from scratch or from state\n ********************************************/\nconst start = () => {\n\n    const storedState = localStorage.getItem('state')\n\n    if (storedState) {\n\n        // Update game state \n        Object.assign(STATE, JSON.parse(storedState))\n\n        initializeGameFromState()\n\n    } else {\n        initializeGame()\n    }\n}\n\nstart()\n"]}