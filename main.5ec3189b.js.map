{"version":3,"sources":["js/card.js","js/iconConstants.js","js/icon.js","js/main.js"],"names":["card","face","icon","document","createElement","className","dataset","cardFace","tabIndex","title","append","cardBack","back","innerHTML","ICONS","DICE","path","DROPLET","EARTH","HEADPHONES","LIBRARY","ROCKET","STAR","TROPHY","iconObject","map","p","join","memoryGame","getElementById","memoryGrid","gameCompleted","result","SELECTED","selectedCards","matchedCards","cardFlips","memoryCards","initializeMemoryCards","name","cardIcon","toLowerCase","push","flipCard","classes","classList","length","includes","add","matchSelectedCards","addEventListener","event","target","parentElement","keyCode","card1","card2","updateMatchedCards","setTimeout","resetSelectedCards","displayCongrats","displayGameCompleted","style","overflow","innerText","opacity","visibility","hideGameCompleted","remove","cardArray","forEach","resetGame","children","newGameButton","randomizeCardsAndSetMemoryGame","sort","a","b","Math","random","initializeGame"],"mappings":"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","file":"main.5ec3189b.js","sourceRoot":"..","sourcesContent":["// Create a card element\nconst card = (face, icon) => {\n    const card = document.createElement('div')\n    card.className = 'card'\n    // For matching flipped cards\n    card.dataset.cardFace = face\n    // For accessibility\n    card.tabIndex = 0\n    card.title = 'memory-card'\n    card.append(cardBack(), cardFace(face, icon))\n    return card\n}\n\n// Create back side of card\nconst cardBack = () => {\n    const back = document.createElement('div')\n    back.className = 'card-back'\n    return back\n}\n\n// Create face of card\nconst cardFace = (face, icon) => {\n    const cardFace = document.createElement('div')\n    cardFace.className = `card-face ${face}`\n    cardFace.innerHTML = icon\n    return cardFace\n}\n\nexport default card","// Use an svgomg to simplify the svg into path d(s)\n// https://jakearchibald.github.io/svgomg/ \n\nconst ICONS = {\n    DICE: {\n        title: \"Dice\",\n        path: [\n            \"M27 6h-16c-2.75 0-5 2.25-5 5v16c0 2.75 2.25 5 5 5h16c2.75 0 5-2.25 5-5v-16c0-2.75-2.25-5-5-5zM13 28c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3zM13 16c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3zM19 22c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3zM25 28c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3zM25 16c-1.657 0-3-1.343-3-3s1.343-3 3-3 3 1.343 3 3-1.343 3-3 3zM25.899 4c-0.467-2.275-2.491-4-4.899-4h-16c-2.75 0-5 2.25-5 5v16c0 2.408 1.725 4.432 4 4.899v-19.899c0-1.1 0.9-2 2-2h19.899z\"\n        ]\n    },\n    DROPLET: {\n        title: \"Droplet\",\n        path: [\n            \"M27.020 14.786c-2.055-5.732-6.41-10.88-11.020-14.786-4.61 3.907-8.965 9.054-11.020 14.786-1.271 3.545-1.396 7.393 0.393 10.794 2.058 3.911 6.207 6.42 10.626 6.42s8.569-2.509 10.626-6.42c1.79-3.401 1.664-7.249 0.393-10.794zM23.086 23.717c-1.369 2.602-4.15 4.283-7.086 4.283-1.723 0-3.391-0.579-4.753-1.583 0.414 0.054 0.832 0.083 1.254 0.083 3.67 0 7.146-2.1 8.856-5.351 1.402-2.665 1.281-5.433 0.746-7.636 0.455 0.88 0.841 1.756 1.151 2.623 0.706 1.971 1.251 4.886-0.168 7.581z\"\n        ]\n    },\n    EARTH: {\n        title: \"Earth\",\n        path: [\n            \"M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM16 30c-1.967 0-3.84-0.407-5.538-1.139l7.286-8.197c0.163-0.183 0.253-0.419 0.253-0.664v-3c0-0.552-0.448-1-1-1-3.531 0-7.256-3.671-7.293-3.707-0.188-0.188-0.442-0.293-0.707-0.293h-4c-0.552 0-1 0.448-1 1v6c0 0.379 0.214 0.725 0.553 0.894l3.447 1.724v5.871c-3.627-2.53-6-6.732-6-11.489 0-2.147 0.484-4.181 1.348-6h3.652c0.265 0 0.52-0.105 0.707-0.293l4-4c0.188-0.188 0.293-0.442 0.293-0.707v-2.419c1.268-0.377 2.61-0.581 4-0.581 2.2 0 4.281 0.508 6.134 1.412-0.13 0.109-0.256 0.224-0.376 0.345-1.133 1.133-1.757 2.64-1.757 4.243s0.624 3.109 1.757 4.243c1.139 1.139 2.663 1.758 4.239 1.758 0.099 0 0.198-0.002 0.297-0.007 0.432 1.619 1.211 5.833-0.263 11.635-0.014 0.055-0.022 0.109-0.026 0.163-2.541 2.596-6.084 4.208-10.004 4.208z\"\n        ]\n    },\n    HEADPHONES: {\n        title: \"Headphones\",\n        path: [\n            \"M9 18H7v14h2c.55 0 1-.45 1-1V19c0-.55-.45-1-1-1zM23 18c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h2V18h-2z\",\n            \"M32 16c0-8.837-7.163-16-16-16S0 7.163 0 16c0 1.919.338 3.759.958 5.464C.349 22.502 0 23.71 0 25c0 3.526 2.608 6.443 6 6.929V18.072a6.957 6.957 0 0 0-2.742 1.012C3.09 18.249 3 17.385 3 16.5c0-7.18 5.82-13 13-13s13 5.82 13 13c0 .885-.088 1.749-.257 2.584A6.9629 6.9629 0 0 0 26 18.071v13.858c3.392-.485 6-3.402 6-6.929 0-1.29-.349-2.498-.958-3.536.62-1.705.958-3.545.958-5.465z\"\n        ]\n    },\n    LIBRARY: {\n        title: \"Library\",\n        path: [\n            \"M32 30v-2h-2V16h2v-2h-6v2h2v12h-6V16h2v-2h-6v2h2v12h-6V16h2v-2h-6v2h2v12H6V16h2v-2H2v2h2v12H2v2H0v2h34v-2h-2zM16 0h2l16 10v2H0v-2L16 0z\"\n        ]\n    },\n    ROCKET: {\n        title: \"Rocket\",\n        path: [\n            \"M22 2l-10 10h-6l-6 8c0 0 6.357-1.77 10.065-0.94l-10.065 12.94 13.184-10.255c1.839 4.208-1.184 10.255-1.184 10.255l8-6v-6l10-10 2-10-10 2z\"\n        ]\n    },\n    STAR: {\n        title: \"Star\",\n        path: [\n            \"M32 12.408l-11.056-1.607-4.944-10.018-4.944 10.018-11.056 1.607 8 7.798-1.889 11.011 9.889-5.199 9.889 5.199-1.889-11.011 8-7.798z\"\n        ]\n    },\n    TROPHY: {\n        title: \"Trophy\",\n        path: [\n            \"M26 6v-4h-20v4h-6v4c0 3.314 2.686 6 6 6 0.627 0 1.232-0.096 1.801-0.275 1.443 2.063 3.644 3.556 6.199 4.075v6.2h-2c-2.209 0-4 1.791-4 4h16c0-2.209-1.791-4-4-4h-2v-6.2c2.555-0.519 4.756-2.012 6.199-4.075 0.568 0.179 1.173 0.275 1.801 0.275 3.314 0 6-2.686 6-6v-4h-6zM6 13.625c-1.999 0-3.625-1.626-3.625-3.625v-2h3.625v2c0 1.256 0.232 2.457 0.655 3.565-0.213 0.039-0.431 0.060-0.655 0.060zM29.625 10c0 1.999-1.626 3.625-3.625 3.625-0.224 0-0.442-0.021-0.655-0.060 0.423-1.107 0.655-2.309 0.655-3.565v-2h3.625v2z\"\n        ]\n    },\n}\n\nexport default ICONS","// Use an svgomg to simplify the svg into path d(s)\n// https://jakearchibald.github.io/svgomg/ \n\nconst icon = (iconObject) => {\n    const path = iconObject.path.map(p =>\n        `<path d=\"${p}\"></path>`\n    ).join('')\n\n    return (\n        `<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\">\n        <title>${iconObject.title}</title>\n        ${path}\n    </svg>`\n    )\n}\n\nexport default icon","'use strict'\n\nimport card from './card'\nimport ICONS from './iconConstants'\nimport icon from './icon'\n\nconst memoryGame = document.getElementById('memory-game')\nconst memoryGrid = document.getElementById('memory-grid')\nconst gameCompleted = document.getElementById('game-completed')\nconst result = document.getElementById('card-flips')\n\nconst SELECTED = 'selected'\nlet selectedCards = []\nlet matchedCards = 0\nlet cardFlips = 0\n\nconst memoryCards = []\n// Initialize memoryCards array of 16 (8*2) card elements with icons\nconst initializeMemoryCards = () => {\n    for (let name in ICONS) {\n        const cardIcon = icon(ICONS[name])\n        const face = name.toLowerCase()\n        memoryCards.push(card(face, cardIcon))\n        memoryCards.push(card(face, cardIcon))\n    }\n}\n\nconst flipCard = card => {\n    // Prevent card flips when already selected 2 cards\n    // as well as clicked same card as already selected\n    const classes = [...card.classList]\n    if (selectedCards.length === 2 ||\n        classes.includes(SELECTED) ||\n        !classes.includes('card')) {\n        return;\n    }\n\n    // Add to result message\n    cardFlips++\n\n    // Add selected class to flip the card\n    card.classList.add(SELECTED)\n    // Store selected card for match check\n    selectedCards.push(card)\n\n    matchSelectedCards()\n}\n\n// Memory game click listener for cards\nmemoryGame.addEventListener('click', event => {\n    flipCard(event.target.parentElement)\n})\n\n// Memory game key listener for cards\n// https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML\nmemoryGame.addEventListener('keydown', event => {\n    if (event.keyCode === 13) {\n        flipCard(event.target)\n    }\n})\n\n// Check if the selected cards match\nconst matchSelectedCards = () => {\n    if (selectedCards.length < 2) {\n        return\n    }\n\n    const [card1, card2] = selectedCards\n\n    if (card1.dataset.cardFace === card2.dataset.cardFace) {\n        updateMatchedCards()\n    } else {\n        setTimeout(() => {\n            resetSelectedCards(selectedCards)\n        }, 1000)\n    }\n}\n\n// Update matched cards\nconst updateMatchedCards = () => {\n    // All cards flipped, game completed\n    if (++matchedCards === 8) {\n        displayCongrats()\n    }\n    // Reset selected cards array\n    selectedCards = []\n}\n\nconst displayGameCompleted = () => {\n    memoryGame.style.overflow = 'hidden'\n    result.innerText = `${cardFlips} card flips`\n    memoryGrid.classList.add('blur')\n    gameCompleted.style.opacity = 1\n    gameCompleted.style.visibility = 'visible'\n}\n\nconst hideGameCompleted = () => {\n    gameCompleted.style.opacity = 0\n    gameCompleted.style.visibility = 'hidden'\n    memoryGrid.classList.remove('blur')\n    memoryGame.style.overflow = 'visible'\n}\n\nconst displayCongrats = () => {\n    setTimeout(() => {\n        displayGameCompleted()\n        setTimeout(hideGameCompleted, 6000)\n    }, 500)\n}\n\n// Reset selected cards\nconst resetSelectedCards = cardArray => {\n    cardArray.forEach(card => {\n        card.classList.remove(SELECTED)\n    })\n    selectedCards = []\n}\n\nconst resetGame = () => {\n    matchedCards = 0\n    cardFlips = 0\n    resetSelectedCards([...memoryGrid.children])\n    hideGameCompleted()\n}\n\n// New game button -- reset game and start a new\nconst newGameButton = document.getElementById('new-game')\nnewGameButton.addEventListener('click', () => {\n    resetGame()\n    randomizeCardsAndSetMemoryGame()\n})\n\n// Randomize card order & set up memory game\nconst randomizeCardsAndSetMemoryGame = () => {\n    memoryCards.sort((a, b) => 0.5 - Math.random())\n    memoryGrid.append(...memoryCards)\n}\n\n// On page load:\n// Add card elements to the DOM\nconst initializeGame = () => {\n    initializeMemoryCards()\n    randomizeCardsAndSetMemoryGame()\n}\n\ninitializeGame()"]}